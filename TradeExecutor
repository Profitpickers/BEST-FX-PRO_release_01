//+------------------------------------------------------------------+
//|                                                TradeExecutor.mqh |
//|                                  Copyright 2025, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
//+------------------------------------------------------------------+
//|                   TradeExecutor.mqh                              |
//|  Modulo per esecuzione automatica ordini sui 5 cross migliori    |
//|           Autore: Vito Iacobellis – www.vitoiacobellis.it       |
//+------------------------------------------------------------------+

#ifndef __TRADE_EXECUTOR_MQH__
#define __TRADE_EXECUTOR_MQH__

#include <Trade\Trade.mqh>
#include "BestCrossSelector.mqh"

class CTradeExecutor
{
private:
   CTrade trade;
   int slippage;
   double lots;
   double sl_points;
   double tp_points;

public:
   void Init(double lotSize, double sl, double tp, int slip)
{
   lots = lotSize;
   sl_points = sl;
   tp_points = tp;
   slippage = slip;
}

   void ExecuteOrders(CBestCrossSelector &crossSelector, bool invertLogic, double threshold)
{
   for (int i = 0; i < 5; i++)
   {
      CrossSignal signal = crossSelector.GetBestCross(i);
      if (!signal.isValid || MathAbs(signal.indexDelta) < threshold)
      {
         Print("[TradeExecutor] Skipped ", signal.symbol, " - Weak ΔIndex: ", DoubleToString(signal.indexDelta, 5));
         continue;
      }

      if (HasOpenPosition(signal.symbol))
         continue;

      ENUM_ORDER_TYPE type = ((signal.indexDelta > 0) != invertLogic) ? ORDER_TYPE_BUY : ORDER_TYPE_SELL;

      double price = (type == ORDER_TYPE_BUY) ? SymbolInfoDouble(signal.symbol, SYMBOL_ASK)
                                              : SymbolInfoDouble(signal.symbol, SYMBOL_BID);
      double sl = (type == ORDER_TYPE_BUY) ? price - sl_points * _Point : price + sl_points * _Point;
      double tp = (type == ORDER_TYPE_BUY) ? price + tp_points * _Point : price - tp_points * _Point;

      bool result = trade.PositionOpen(signal.symbol, type, lots, price, sl, tp, "AUTO-CS");

      if (result)
         Print("[TradeExecutor] ✅ OPEN ", EnumToString(type), " on ", signal.symbol, " | Δ=", DoubleToString(signal.indexDelta, 5));
      else
         Print("[TradeExecutor] ❌ FAILED ", signal.symbol, " | Δ=", DoubleToString(signal.indexDelta, 5));
   }
}


   bool HasOpenPosition(string symbol)
{
   if (PositionSelect(symbol))
      return true;
   return false;
}
};

#endif // __TRADE_EXECUTOR_MQH__
