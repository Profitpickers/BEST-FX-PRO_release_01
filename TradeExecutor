//+------------------------------------------------------------------+
//|                                                TradeExecutor.mqh |
//|                                  Copyright 2025, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
//+------------------------------------------------------------------+
//| Modulo per esecuzione automatica ordini sui 5 cross migliori     |
//| Autore: Vito Iacobellis ‚Äì www.vitoiacobellis.it                 |
//+------------------------------------------------------------------+
#ifndef __TRADE_EXECUTOR_MQH__
#define __TRADE_EXECUTOR_MQH__

#include <Trade\Trade.mqh>
#include "BestCrossSelector.mqh"
#include "CheckSpreadAcceptable.mqh"

class CTradeExecutor
{
private:
   CTrade trade;
   int slippage;
   double lots;
   double sl_points;
   double tp_points;

public:

   //--- Inizializzazione parametri
   void Init(double lotSize, double sl, double tp, int slip)
   {
      lots      = lotSize;
      sl_points = sl;
      tp_points = tp;
      slippage  = slip;
   }

   //--- Esecuzione ordini sui 5 migliori cross
   void ExecuteOrders(CBestCrossSelector &crossSelector,
                      bool invertLogic,
                      double threshold,
                      double maxSpreadPoints)
   {
      for (int i = 0; i < 5; i++)
      {
         CrossSignal signal = crossSelector.GetBestCross(i);

         if (!signal.isValid || MathAbs(signal.indexDelta) < threshold)
         {
            Print("[TradeExecutor] Skipped ", signal.symbol, " - Weak ŒîIndex: ", DoubleToString(signal.indexDelta, 5));
            continue;
         }

         //--- Check spread prima di tutto
         if (!CheckSpreadAcceptable(signal.symbol, maxSpreadPoints))
         {
            Print("[TradeExecutor] ‚ùå Skipped ", signal.symbol, " - Spread eccessivo");
            continue;
         }

         ENUM_ORDER_TYPE type = ((signal.indexDelta > 0) != invertLogic) ? ORDER_TYPE_BUY : ORDER_TYPE_SELL;

         if (HasOpenPositionSameDirection(signal.symbol, type))
            continue;

         double price = (type == ORDER_TYPE_BUY)
                          ? SymbolInfoDouble(signal.symbol, SYMBOL_ASK)
                          : SymbolInfoDouble(signal.symbol, SYMBOL_BID);

         double sl = (type == ORDER_TYPE_BUY)
                          ? price - sl_points * _Point
                          : price + sl_points * _Point;

         double tp = (type == ORDER_TYPE_BUY)
                          ? price + tp_points * _Point
                          : price - tp_points * _Point;

         bool result = trade.PositionOpen(signal.symbol, type, lots, price, sl, tp, "AUTO-CS");

         if (result)
            Print("[TradeExecutor] ‚úÖ OPEN ", EnumToString(type), " on ", signal.symbol, " | Œî=", DoubleToString(signal.indexDelta, 5));
         else
            Print("[TradeExecutor] ‚ùå FAILED ", signal.symbol, " | Œî=", DoubleToString(signal.indexDelta, 5));
      }
   }

   //--- Verifica presenza posizione aperta nella stessa direzione
   bool HasOpenPositionSameDirection(string symbol, ENUM_ORDER_TYPE newType)
   {
      if (!PositionSelect(symbol))
         return false;

      long existingType = PositionGetInteger(POSITION_TYPE);

      if ((ENUM_ORDER_TYPE)existingType == newType)
      {
         PrintFormat("[TradeExecutor] ‚ûñ Skip %s: gi√† aperta in direzione (%s)", symbol, EnumToString((ENUM_ORDER_TYPE)existingType));
         return true;
      }

      //--- Chiude posizione opposta
      double volume = PositionGetDouble(POSITION_VOLUME);
      trade.PositionClose(symbol);

      PrintFormat("[TradeExecutor] üîÅ Closed %s, apertura in corso di %s",
                  EnumToString((ENUM_ORDER_TYPE)existingType),
                  EnumToString(newType));

      return false; // Ora si pu√≤ aprire
   }
};

#endif // __TRADE_EXECUTOR_MQH__
