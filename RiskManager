//+------------------------------------------------------------------+
//|                                                  RiskManager.mqh |
//|      Modulo gestione rischio: lotto dinamico, SL/TP percentuale  |
//|      Autore: Vito Iacobellis – www.vitoiacobellis.it             |
//+------------------------------------------------------------------+

#ifndef __RISK_MANAGER_MQH__
#define __RISK_MANAGER_MQH__

class CRiskManager
{
private:
   double accountRiskPercent;
   double stopLossPips;

public:
   void Init(double riskPercent, double slPips)
   {
      accountRiskPercent = riskPercent;
      stopLossPips = slPips;
   }

   double CalculateLotSize(string symbol)
   {
      double balance     = AccountInfoDouble(ACCOUNT_BALANCE);
      double tickValue   = SymbolInfoDouble(symbol, SYMBOL_TRADE_TICK_VALUE);
      double tickSize    = SymbolInfoDouble(symbol, SYMBOL_TRADE_TICK_SIZE);
      double contract    = SymbolInfoDouble(symbol, SYMBOL_TRADE_CONTRACT_SIZE);
      double point       = SymbolInfoDouble(symbol, SYMBOL_POINT);
      double minLot      = SymbolInfoDouble(symbol, SYMBOL_VOLUME_MIN);
      double maxLot      = SymbolInfoDouble(symbol, SYMBOL_VOLUME_MAX);
      double lotStep     = SymbolInfoDouble(symbol, SYMBOL_VOLUME_STEP);

      // Verifica dati validi
      if (tickValue <= 0 || tickSize <= 0 || point <= 0 || contract <= 0)
      {
         Print("[RM] Warning: Parametri invalidi per ", symbol, ". Uso fallback minLot=", minLot);
         return NormalizeDouble(minLot, 2); // Fallback
      }

      double riskAmount  = balance * accountRiskPercent / 100.0;
      double slInPoints  = stopLossPips / point;
      double pointValue  = tickValue / tickSize;

      double rawLot = riskAmount / (slInPoints * pointValue);

      // Normalizza
      double normalizedLot = MathFloor(rawLot / lotStep) * lotStep;

      if (normalizedLot < minLot || normalizedLot <= 0)
      {
         Print("[RM] Warning: Lotto calcolato troppo basso (", normalizedLot, ") → uso minLot=", minLot);
         normalizedLot = minLot;
      }

      normalizedLot = MathMin(normalizedLot, maxLot);

      return NormalizeDouble(normalizedLot, 2);
   }
};


#endif // __RISK_MANAGER_MQH__
