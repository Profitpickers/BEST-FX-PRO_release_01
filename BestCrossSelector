//+------------------------------------------------------------------+
//|                                            BestCrossSelector.mqh |
//|                                  Copyright 2025, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
//+------------------------------------------------------------------+
//|                  BestCrossSelector.mqh                           |
//|    Selezione automatica dei 5 migliori cross FX                  |
//|    Basato su forza valute calcolata con CurrencyStrengthAnalyzer |
//+------------------------------------------------------------------+

#ifndef __BEST_CROSS_SELECTOR_MQH__
#define __BEST_CROSS_SELECTOR_MQH__

#include "..\\include1\\CurrencyStrengthAnalyzer.mqh"

struct CrossSignal
{
   string symbol;
   double indexDelta;
   bool isValid;
};

class CBestCrossSelector
{
private:
   CCurrencyStrengthAnalyzer analyzer;
   CrossSignal bestCrosses[10]; // fino a 10 in base ai nuovi parametri
   double strengthMap[8];

   int topBuyCount;
   int topSellCount;

public:

   void Init(CurrencyStrengthSettings &settings, int buyCount = 3, int sellCount = 3)
   {
      analyzer.Init(settings);
      topBuyCount = buyCount;
      topSellCount = sellCount;
   }

   void CalculateStrengthMap(ENUM_TIMEFRAMES tf, int shift = 0)
   {
      for (int i = 0; i < 8; i++)
      {
         string currency = analyzer.GetCurrency(i);
         strengthMap[i] = analyzer.GetCurrencyStrength(currency, tf, shift);
      }
   }

   CrossSignal GetBestCross(int index)
   {
      if (index >= 0 && index < ArraySize(bestCrosses))
         return bestCrosses[index];
      CrossSignal empty = { "", 0.0, false };
      return empty;
   }

   void SelectTopCrosses()
   {
      CrossSignal positives[64];
      CrossSignal negatives[64];
      int pCount = 0, nCount = 0;

      for (int i = 0; i < 8; i++)
      {
         string base = analyzer.GetCurrency(i);
         for (int j = 0; j < 8; j++)
         {
            if (i == j) continue;
            string quote = analyzer.GetCurrency(j);

            string trySymbol = base + quote;
            if (!SymbolInfoInteger(trySymbol, SYMBOL_SELECT))
            {
               trySymbol = quote + base;
               if (!SymbolInfoInteger(trySymbol, SYMBOL_SELECT))
                  continue;
            }

            string symbol = trySymbol;
            SymbolSelect(symbol, true);

            double delta = NormalizeDouble(strengthMap[i] - strengthMap[j], 5);
            if (symbol == (quote + base))
               delta = -delta;

            CrossSignal cs;
            cs.symbol = symbol;
            cs.indexDelta = delta;
            cs.isValid = true;

            if (delta > 0 && pCount < ArraySize(positives))
               positives[pCount++] = cs;
            else if (delta < 0 && nCount < ArraySize(negatives))
               negatives[nCount++] = cs;
         }
      }

      // Ordina per forza
      ArraySortByAbsDelta(positives, pCount, true);
      ArraySortByAbsDelta(negatives, nCount, true);

      // Seleziona i top X da ciascun gruppo
      int total = 0;
      for (int i = 0; i < topBuyCount && i < pCount && total < ArraySize(bestCrosses); i++)
         bestCrosses[total++] = positives[i];

      for (int i = 0; i < topSellCount && i < nCount && total < ArraySize(bestCrosses); i++)
         bestCrosses[total++] = negatives[i];

      // Invalida gli slot rimanenti
      for (int i = total; i < ArraySize(bestCrosses); i++)
      {
         bestCrosses[i].symbol = "";
         bestCrosses[i].indexDelta = 0.0;
         bestCrosses[i].isValid = false;
      }
   }

private:

   void ArraySortByAbsDelta(CrossSignal &arr[], int size, bool descending)
   {
      for (int i = 0; i < size - 1; i++)
      {
         for (int j = 0; j < size - i - 1; j++)
         {
            double a = MathAbs(arr[j].indexDelta);
            double b = MathAbs(arr[j + 1].indexDelta);
            if ((descending && a < b) || (!descending && a > b))
            {
               CrossSignal t = arr[j];
               arr[j] = arr[j + 1];
               arr[j + 1] = t;
            }
         }
      }
   }
};

#endif // __BEST_CROSS_SELECTOR_MQH__
